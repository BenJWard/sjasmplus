scratch area + TODO keeper for sjasmplus developers:
====================================================


====================
Ped:

STDIN needs MANY Ctrl+D to finish, when used by actual interactive console and not
input redirection... (and it's lot more many than just 3-pass 3x). Seems like there
should be some regular clib API way to detect it first time, and be done with it,
the current behaviour is wrong.

consider the "low memory access" warning locked to only ZX-like devices?

parser.cpp ParseExpShift and other "needa" doing transformations (shr => '>' ???)
- write tests trying those "while" loops for groups of operators
- write tests testing operator precedence

CSPECTMAP - needs better support for DISP and instances of STRUCT

--syntax: "I" to uppercase all labels + usage (needs labels refactoring)
--syntax: L options implementation
    add DOCS example test: "hl: Ld a,(hl),,de,hl" when all is implemented

static analysis: PVS-Studio https://www.viva64.com/en/m/0036/

FIXME in sources mark further points worth refactoring

FIXME: get rid of ParseDirective_REPT somehow, its existence can't be right
(breaks ` .34 repeatX` directive probably? .. and END@beginningOfLine? .. actually not?)

SplitLuaErrorMessage - review the code one more time

ReadBufLine parsing refactored. Now look for other parts of code trying to do similar things and refactor too..

I almost certainly broke some STRCPY/STRCAT max-size limits (i.e. malicious source may buffer overflow)...

Macro world issues:
- macros for operators? (in ideal case `zeuskeyaddr` possible to recreate in macro?)
- more operators, capable of some string manipulation and maybe some type/expression checks (islabel)
- ability to issue real instruction (ignoring possible macro of same name)

SAVEHOB/SAVETRD/SAVETAP/... global review of filename handling, adding warnings/errors
where filename modification happens or filename is invalid.

** Macro/define substitution rules and implementation (proposal):
- macro arguments substitute with priority, from the longest ones
- macro arguments substitute even in define related directives
- define arguments substitute next, from the longest ones (inc. defarray)
- name of define/macroarg starting with underscore prohibits substitution into middle
(can substitute only at beginning)
? extend that rule to underscore at end sealing also the tail?
- lock some keywords for define/etc... at least put them under warning
- inhibitor of substitutions happening (like `@djnz` inhibits macro replacement).
** Current refactored implementation:
- doesn't play priorities as proposed above
- evaluation of defarray index is still flaky and doesn't work correctly inside macro/etc
- needs lot more testing and cleanup
+ should be already a bit more intuitive than 1.08+ (although it may break legacy source)

ZX128 snapshot default state and mapping - still doesn't survive simple `ret` into BASIC

DISP inside DISP bugs => documented. Correct solution = nesting DISPs?!

$$label operator to get label page. (and fix pages for defl/equ/expression/... labels)
//// syntax summary:
    labels (\.|@|)[A-Za-z_][A-Za-z0-9_.?!#@]*
    , argument-separator    : instruction-separator     ; // comment
    # $ hexnums, % binary, "' strings, () parentheses or memcell, [] memcell, {} device mem
    operators-unary: ! ~ + - low high not
    operators-binary: * / % mod + - << >> >>> shl shr <? >? < > <= >= = == != & and ^ xor | or && ||
    us keyboard: ~!@#$%^&*()_+`-=[]{};':"<>?,./\|
    $$label - hexa are single $ only, so this looks fine (unary operator)
    ?label - 5<?label => ambiguous
    \label - looks weird, no syntax clash
Needs more syntax:
    - reformat label into different slot... <slot>$$expression ? (binary operator)
    - differentiate 16+b address space from 16b slot-mapped address space.
        &label/expression? Similar to C/C++? &0x1231241 ? (5123 + &1234)

MMU:
- custom pages order for wrap-next-mapping option (like "<3, 5, 1, 2>" ?)
- err/warn/warp option for slot range?

Kate syntax: broken with LUA block containing "end" keyword (maybe even consider including Lua highlight rules from KDE defaults, if it's possible)
    - also missing MMU ?
    - backward slashes in path strings are not working as escapes, single "\" there is OK, but syntax highlight thinks it's "DB" like string.

AppVeyor CI for windows clang + mingw + MSVS2015 builds?

##### sjasmplus 2.x/fork:

"ok" warning suppressing mechanism for ALL warnings?

EQU and DEFL to not affect local labels (not defining new "main" label)

Operators precedence: (2 == 3&2) = ((2 == 3)&2) = false in current sjasmplus... ????
    https://en.cppreference.com/w/cpp/language/operator_precedence

address space of labels -> 2|3:30|29 bits, the top bits being default slot number,
remaining bits being physical address into global chip address space
-> then producing machine code using the particular label would "format" physical
label value for particular "slot" (view of value).

To stay backward compatible/similar, one would have to support also 0000-FFFF range as if
going through the mapped pages.. but that does collide with early pages 0..n ...
How about abusing "@" or "." or something to distinguish between? (& resembles C/C++!)

Make --syntax=abflL default for v2.x and check other defaults
Maybe add support for escaped '\'' and other combinations back, to be more C++ compatible

Check about other syntax ambiguities, what seems too much relaxed and could be stricter for v2.x

N-pass

new lua + js support?

Refactor filepath functions to deal with backward slashes systematically
(or maybe just wait few more years, can't be that long now before windows are gone)

Big-text-block directive? (there's INCBIN workaround using separate file)

====================
Docs:

"pseudo-ops as SAVEBIN, SAVEHOB, SAVETRD, SAVETAP, PAGE, SLOT, LABELSLIST and use special functions in Lua scripts."
^^ link each?

DEVICE needs better description? Issue #55
... and also SAVENEX and default ZXNEXT device... again...
